// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.PowerUp2018;

import org.usfirst.frc2876.PowerUp2018.commands.AutoCGLine;
import org.usfirst.frc2876.PowerUp2018.commands.AutoCGSwitchScale;
import org.usfirst.frc2876.PowerUp2018.subsystems.DriveTrain;
import org.usfirst.frc2876.PowerUp2018.subsystems.Intake;
import org.usfirst.frc2876.PowerUp2018.utilities.Pixy2I2C;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2876.PowerUp2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;

    public static RoboRioDIO roborioDIO;
    public static Elevator elevator;
    public static Pixy2I2C pixy;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static String gameData = "";
    public static enum RobotPosition { Left, Center, Right; }  
    public static RobotPosition robotPos;
    
    SendableChooser<RobotPosition> startPosChooser = new SendableChooser<>();
//    SendableChooser<Command> autoChooser = new SendableChooser<>();
    Command autonomousCommand;
    
   
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveTrain = new DriveTrain();
        SmartDashboard.putData(driveTrain);
        
        intake = new Intake();
        SmartDashboard.putData(intake);
        
        elevator = new Elevator();
        SmartDashboard.putData(elevator);

        pixy = new Pixy2I2C("test", 0x54);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        startPosChooser.addDefault("Center", RobotPosition.Center);
        startPosChooser.addObject("Left", RobotPosition.Left);
        startPosChooser.addObject("Right", RobotPosition.Right);
        SmartDashboard.putData("Start Position", startPosChooser);
        
//        autoChooser.addDefault("Switch Scale Chooser", new AutoCGSwitchScale());
//        autoChooser.addObject("Auto Line", new AutoCGLine());
//        SmartDashboard.putData("Autonomous Choice", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        pixy.ledOff();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	Robot.elevator.resetPositionValue(RobotMap.ELEVATOR_POSITION_KICKSTAND);
    	
    	// Get FMS data
        int retries = 100;
    	gameData = DriverStation.getInstance().getGameSpecificMessage();
        while (gameData.length() < 2 && retries > 0) {
            retries--;
            try {
                Thread.sleep(5);
            } catch (InterruptedException ie) {
                // ignore the interrupted exception
            }
            gameData = DriverStation.getInstance().getGameSpecificMessage();
        }
        
    	// Get Robot Position from SmartDashboard
    	robotPos = startPosChooser.getSelected();
    	Long delay = (long) SmartDashboard.getNumber(RobotMap.SD_KEY_AUTO_DELAY, 0);
    	
    	// Get the autonomous command to run
//        autonomousCommand = autoChooser.getSelected();
    	autonomousCommand = new AutoCGSwitchScale(delay);
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        driveTrain.updateSmartDashboard();
        intake.updateSmartDashboard();
        elevator.updateSmartDashboard();
        
        SmartDashboard.putBoolean("isSwitchLeft", Robot.isSwitchLeft());
		SmartDashboard.putBoolean("isScaleLeft", Robot.isScaleLeft());
		SmartDashboard.putString("RobotPosition", Robot.getRobotPos().toString());
		
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        // TODO - Stuff that used to be in here - be sure we don't want any of these
    	//Robot.driveTrain.resetEncoders();
    	//Robot.elevator.resetPositionValue();
        //driveTrain.navx.reset();

        pixy.version();
        pixy.ledOn();
        pixy.ledGreen();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
   
        driveTrain.updateSmartDashboard();
        intake.updateSmartDashboard();
        elevator.updateSmartDashboard();
        //roborioDIO.updateSmartDashboard();
    }
    
    
    public static boolean isSwitchLeft() {
    	return (gameData.length() > 0 && gameData.charAt(0) == 'L');
    }
    
    public static boolean isSwitchRight() {
    	return (gameData.length() > 0 && gameData.charAt(0) == 'R');
    }    
    
    public static boolean isScaleLeft() {
    	return (gameData.length() > 0 && gameData.charAt(1) == 'L');
    }
    
    public static boolean isScaleRight() {
    	return (gameData.length() > 0 && gameData.charAt(1) == 'R');
    }
    
    public static RobotPosition getRobotPos() {
    	return robotPos;
    }
}
