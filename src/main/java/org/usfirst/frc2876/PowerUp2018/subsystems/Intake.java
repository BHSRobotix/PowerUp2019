
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.PowerUp2018.subsystems;

import org.usfirst.frc2876.PowerUp2018.RobotMap;
import org.usfirst.frc2876.PowerUp2018.commands.IntakeStop;

import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX intakeRightTalonSRX7 = RobotMap.intakeIntakeRightTalonSRX7;
    private final WPI_TalonSRX intakeLeftTalonSRX8 = RobotMap.intakeIntakeLeftTalonSRX8;
    
    private final WPI_TalonSRX armTalon = RobotMap.armLiftTalonSRX9;
    
    private final double DISTANCE_WHEN_BOX_IN = 8; // distance in inches

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Ultrasonic usIntakeSensor = RobotMap.usIntakeSensor;
    public Intake() {
    	intakeLeftTalonSRX8.setInverted(false);
    	
    	intakeRightTalonSRX7.setInverted(true);
    	intakeLeftTalonSRX8.setNeutralMode(NeutralMode.Coast);
    	intakeRightTalonSRX7.setNeutralMode(NeutralMode.Coast);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new IntakeStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
       
    }

    public void spinInwards(double output){
    	intakeLeftTalonSRX8.set(output);
    	intakeRightTalonSRX7.set(output);
    }
    
    public void spinOutwards(double output){
    	intakeLeftTalonSRX8.set(output);
    	intakeRightTalonSRX7.set(output);
    }
    
    public void setBothMotors(double output){
    	intakeLeftTalonSRX8.set(output);
    	intakeRightTalonSRX7.set(output);
    }
    
    public void updateSmartDashboard() {
//		SmartDashboard.putNumber("Intake Ultrasonic  in mm ",usIntakeSensor.getRangeMM());
  
    	SmartDashboard.putNumber("Intake Ultrasonic distance in Inches ",usIntakeSensor.getRangeInches());
      	usIntakeSensor.ping();
      	SmartDashboard.putNumber("armUp output", armTalon.getMotorOutputPercent());
      	SmartDashboard.putNumber("is arm Encoder working", armTalon.getSelectedSensorPosition(0));
    	SmartDashboard.putBoolean("Intake Ultrasonic Enabled", usIntakeSensor.isEnabled());
       	SmartDashboard.putBoolean("Intake Ultrasonic isRangeValid", usIntakeSensor.isRangeValid());
       	SmartDashboard.putBoolean("isBoxIn", isBoxIn());
       	SmartDashboard.putBoolean("isBoxOut", isBoxOut());
   	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    
    public boolean isBoxIn (){
    	boolean result = false;
    	double ultraSonicDistance = usIntakeSensor.getRangeInches();
    	 if(ultraSonicDistance > 1.0 && ultraSonicDistance < DISTANCE_WHEN_BOX_IN)
    		 result = true;
    	return result;
    }
    
    public boolean isBoxOut (){
    	boolean result = false;
    	double ultraSonicDistance = usIntakeSensor.getRangeMM();
    	 if(ultraSonicDistance > DISTANCE_WHEN_BOX_IN)
    		 result = true;
    	return result;
    }
    
    public void armUp (double output){
    	armTalon.configForwardLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.configReverseLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.set(output);
    	armTalon.clearStickyFaults(0);
    }
    
    public void armDown (double output){
    	armTalon.configForwardLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.configReverseLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.set(output);
    	armTalon.clearStickyFaults(0);
    }
    
    public void armStop (double output){
    	armTalon.configForwardLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.configReverseLimitSwitchSource(LimitSwitchSource.Deactivated, LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.set(output);
    	armTalon.clearStickyFaults(0);
    }

}

